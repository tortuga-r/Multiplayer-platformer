var gdjs;(function(a){const D=new a.Logger("Multiplayer"),g=new a.Logger("Multiplayer - Debug");a.Logger.getDefaultConsoleLoggerOutput().discardGroup("Multiplayer - Debug");class Ae{constructor(k){this.clear=()=>{this.cache.clear(),this.keys=[]};this.maxSize=k,this.cache=new Set,this.keys=[]}has(k){return this.cache.has(k)}add(k){if(this.cache.size>=this.maxSize){const S=this.keys.shift();S&&this.cache.delete(S)}this.cache.add(k),this.keys.push(k)}}class ue{constructor(){this._updates=[]}store(k){this._updates.push(k),this._updates.length>10&&this._updates.shift()}getUpdates(){return this._updates}remove(k){const S=this._updates.indexOf(k);S!==-1&&this._updates.splice(S,1)}clear(){this._updates=[]}}const Ce=({target:A,source:k})=>{for(const S in k)k.hasOwnProperty(S)&&!A.hasOwnProperty(S)&&(A[S]=k[S]);for(const S in A)A.hasOwnProperty(S)&&!k.hasOwnProperty(S)&&delete A[S]};a.makeMultiplayerMessageManager=()=>{const A=0,k=0,S=0,Te=0,v=window.performance&&typeof window.performance.now=="function"?window.performance.now.bind(window.performance):Date.now,_e=200,Je=4,U=new Ae(500);let N={},_={};const He=1;let de=0,Q=null,W=0,V=new ue;const xe=1;let me=0,J=null,F=0,B=new ue;const Le=1;let E=0,K={},pe={},O={},C=[],$=[],Y={};const L=({originalMessageName:e,originalData:t,expectedMessageName:n,otherPeerIds:r,shouldCancelMessageIfTimesOut:s,maxNumberOfRetries:o,messageRetryTime:i})=>{!a.multiplayer.isLobbyGameRunning()||(N[n]||(N[n]={}),g.info(`Adding expected message ${n} from ${r.join(", ")}.`),r.forEach(c=>{N[n][c]={acknowledged:!1,lastMessageSentAt:v(),originalMessageName:e,originalData:t,shouldCancelMessageIfTimesOut:s,numberOfRetries:0,maxNumberOfRetries:o||Je,messageRetryTime:i||_e}}))},fe=({sceneNetworkId:e,instanceNetworkId:t})=>(_[e]||(_[e]={}),_[e][t]||0),ye=({sceneNetworkId:e,instanceNetworkId:t,clock:n})=>{_[e]||(_[e]={}),_[e][t]=n},P=(e,t,n)=>{if(!(k>0&&Math.random()<k)){if(S>0&&Math.random()<S){setTimeout(()=>{a.multiplayerPeerJsHelper.sendDataTo(e,t,n)},Te);return}if(A>0){setTimeout(()=>{a.multiplayerPeerJsHelper.sendDataTo(e,t,n)},A);return}a.multiplayerPeerJsHelper.sendDataTo(e,t,n)}},Ge=(e,t,n)=>{if(!e.length)return null;let r=null,s=1/0;for(let o=0;o<e.length;++o){if(e[o].networkId)continue;const i=e[o],c=Math.pow(i.getX()-t,2)+Math.pow(i.getY()-n,2);c<s&&(r=i,s=c)}return r},Z=({runtimeScene:e,objectName:t,instanceNetworkId:n,instanceX:r,instanceY:s,shouldCreateIfNotFound:o})=>{const i=e.getInstancesOf(t);if(!i)return null;let c=i.find(l=>l.networkId===n)||null;if(!c&&r!==void 0&&s!==void 0){g.info(`instance ${t} ${n} not found with network ID, trying to find it with position ${r}/${s}.`);const l=Ge(i,r,s);l&&(g.info(`Found closest instance for object ${t} ${n} with no network ID.`),c=l,c.networkId=n)}if(!c&&o){g.info(`Instance ${n} still not found, Creating instance ${t}.`);const l=e.createObject(t);if(!l)return null;l.networkId=n,c=l}return c},q="#changeInstanceOwner",he=/#changeInstanceOwner#owner_(\d+)#object_(.+)#instance_(.+)/,Ee=({objectOwner:e,objectName:t,instanceNetworkId:n,newObjectOwner:r,instanceX:s,instanceY:o,sceneNetworkId:i})=>({messageName:`${q}#owner_${e}#object_${t}#instance_${n}`,messageData:{previousOwner:e,newOwner:r,instanceX:s,instanceY:o,sceneNetworkId:i}}),ee="#instanceOwnerChanged",Ue=/#instanceOwnerChanged#owner_(\d+)#object_(.+)#instance_(.+)/,be=e=>e.replace(q,ee),We=e=>{if(!a.multiplayer.isReadyToSendOrReceiveGameUpdateMessages())return;const t=a.multiplayerPeerJsHelper.getAllMessagesMap();Array.from(t.keys()).filter(s=>s.startsWith(q)).forEach(s=>{const o=t.get(s);if(!o)return;const i=o.getMessages();!i.length||i.forEach(c=>{const l=c.getData(),d=c.getSender(),p=he.exec(s);if(!p)return;const f=p[2],u=p[3],m=l.previousOwner,y=l.newOwner,M=l.sceneNetworkId;if(M!==e.networkId){g.info(`Object ${f} is in scene ${M}, but we are on ${e.networkId}. Skipping.`);return}const w=Z({runtimeScene:e,objectName:f,instanceNetworkId:u,instanceX:l.instanceX,instanceY:l.instanceY});if(!w){g.info(`Instance ${u} not found, it must have been destroyed.`);return}const h=w.getBehavior("MultiplayerObject");if(!h){g.info(`Object ${f} does not have the MultiplayerObjectBehavior, cannot change ownership.`);return}const b=h.getPlayerObjectOwnership(),I=b===m||b===y;if(a.multiplayer.isPlayerHost()&&!I){g.info(`Object ${f} with instance network ID ${u} does not have the expected owner. Wanted to change from ${m} to ${y}, but object has owner ${b}.`);return}g.info(`Changing ownership of object ${f} to ${y}.`),h.playerNumber=y;const H=be(s);if(g.info(`Sending acknowledgment of ownership change of object ${f} from ${m} to ${y} with instance network ID ${u} to ${d}.`),P([d],H,{}),a.multiplayer.isPlayerHost()){const j=a.multiplayerPeerJsHelper.getAllPeers().filter(R=>R!==d);if(!j.length)return;L({originalMessageName:s,originalData:l,expectedMessageName:H,otherPeerIds:j,shouldCancelMessageIfTimesOut:!1}),g.info(`Relaying ownership change of object ${f} with instance network ID ${u} to ${j.join(", ")}.`),P(j,s,l)}})})},Me="#updateInstance",Ve=/#updateInstance#owner_(\d+)#object_(.+)#instance_(.+)#scene_(.+)/,Fe=({objectOwner:e,objectName:t,instanceNetworkId:n,objectNetworkSyncData:r,sceneNetworkId:s})=>({messageName:`${Me}#owner_${e}#object_${t}#instance_${n}#scene_${s}`,messageData:r}),Be=e=>{if(!a.multiplayer.isReadyToSendOrReceiveGameUpdateMessages())return;const t=a.multiplayerPeerJsHelper.getAllMessagesMap();Array.from(t.keys()).filter(s=>s.startsWith(Me)).forEach(s=>{const o=t.get(s);if(!o)return;const i=o.getMessages();if(!i.length)return;i.slice().reverse().forEach(l=>{const d=l.getData(),p=l.getSender(),f=Ve.exec(s);if(!f)return;const u=parseInt(f[1],10);if(u===a.multiplayer.playerNumber)return;const m=f[2],y=f[3],M=f[4];if(M!==e.networkId){g.info(`Object ${m} is in scene ${M}, but we are on ${e.networkId}. Skipping.`);return}const w=d._clock,h=fe({sceneNetworkId:M,instanceNetworkId:y});if(w<=h)return;const b=Z({runtimeScene:e,objectName:m,instanceNetworkId:y,shouldCreateIfNotFound:!0,instanceX:d.x,instanceY:d.y});if(!b){D.error("Instance could not be found or created.");return}const I=b.getBehavior("MultiplayerObject");if(!I){D.error(`Object ${m} does not have the MultiplayerObjectBehavior, cannot update it.`);return}if(I.getPlayerObjectOwnership()===a.multiplayer.playerNumber){g.info(`Object ${m} with instance network ID ${y} is owned by us ${a.multiplayer.playerNumber}, ignoring update message from ${u}.`);return}if(I.getPlayerObjectOwnership()!==u&&(g.info(`Object ${m} with instance network ID ${y} is owned by ${I.getPlayerObjectOwnership()} on our game, changing ownership to ${u} as part of the update event.`),I.playerNumber=u),b.updateFromNetworkSyncData(d),ye({sceneNetworkId:M,instanceNetworkId:y,clock:w}),I._clock=w,a.multiplayer.isPlayerHost()){const T=a.multiplayerPeerJsHelper.getAllPeers().filter(j=>j!==p);if(!T.length)return;P(T,s,d)}})})},X="#changeVariableOwner",we=/#changeVariableOwner#owner_(\d+)#variable_(.+)/,Ke=({variableOwner:e,variableNetworkId:t,newVariableOwner:n})=>({messageName:`${X}#owner_${e}#variable_${t}`,messageData:{previousOwner:e,newOwner:n}}),te="#variableOwnerChanged",Ye=/#variableOwnerChanged#owner_(\d+)#variable_(.+)/,Ie=e=>e.replace(X,te),qe=e=>{if(!a.multiplayer.isReadyToSendOrReceiveGameUpdateMessages())return;const t=a.multiplayerPeerJsHelper.getAllMessagesMap();Array.from(t.keys()).filter(s=>s.startsWith(X)).forEach(s=>{const o=t.get(s);if(!o)return;const i=o.getMessages();!i.length||i.forEach(c=>{const l=c.getData(),d=c.getSender(),p=we.exec(s);if(!p)return;const f=p[2],u=l.previousOwner,m=l.newOwner,{type:y,name:M,containerId:w}=a.multiplayerVariablesManager.getVariableTypeAndNameFromNetworkId(f);if(y==="scene"&&w!==e.networkId){g.info(`Variable ${M} is in scene ${w}, but we are on ${e.networkId}. Skipping.`);return}const h=w==="game"?e.getGame().getVariables():e.getVariables();if(!h.has(M)){D.error(`Variable with ID ${f} not found whilst syncing. This should not happen.`);return}const b=h.get(M),I=b.getPlayerOwnership(),H=I===u||I===m;if(a.multiplayer.isPlayerHost()&&!H){g.info(`Variable with ID ${f} does not have the expected owner. Wanted to change from ${u} to ${m}, but variable has owner ${I}.`);return}g.info(`Changing ownership of variable ${M} to ${m}.`),b.setPlayerOwnership(m);const T=Ie(s);if(g.info(`Sending acknowledgment of ownership change of variable with ID ${f} from ${u} to ${m} to ${d}.`),P([d],T,{}),a.multiplayer.isPlayerHost()){const R=a.multiplayerPeerJsHelper.getAllPeers().filter(G=>G!==d);if(!R.length)return;L({originalMessageName:s,originalData:l,expectedMessageName:T,otherPeerIds:R,shouldCancelMessageIfTimesOut:!1});for(const G of R)g.info(`Relaying ownership change of variable with Id ${f} to ${G}.`),P(R,s,l)}})})},Xe=e=>e.startsWith(ne)?st:e.startsWith(ee)?Ue:e.startsWith(te)?Ye:e.startsWith(re)?ot:null,ze=e=>e.startsWith(ne)||e.startsWith(ee)||e.startsWith(te)||e.startsWith(re),Qe=()=>{if(!a.multiplayer.isReadyToSendOrReceiveGameUpdateMessages())return;const e=a.multiplayerPeerJsHelper.getAllMessagesMap();Array.from(e.keys()).filter(ze).forEach(r=>{const s=e.get(r);if(!s)return;const o=s.getMessages();!o.length||o.forEach(i=>{const c=i.getData(),l=i.getSender();g.info(`Received acknowledgment for message ${r}.`);const d=Xe(r);if(!d){D.error(`Invalid acknowledgment message ${r}.`);return}const p=d.exec(r);if(!p){D.error(`Invalid acknowledgment message ${r}.`);return}if(!N[r]||!N[r][l])return;const f=c._clock;if(f!==void 0){const u=p[3],m=p[4],y=fe({sceneNetworkId:m,instanceNetworkId:u});if(f<=y)return;ye({sceneNetworkId:m,instanceNetworkId:u,clock:f})}g.info(`Marking message ${r} as acknowledged from ${l}.`),N[r][l].acknowledged=!0})})},Ze=e=>{if(!a.multiplayer.isReadyToSendOrReceiveGameUpdateMessages())return;Object.keys(N).forEach(n=>{const r=N[n],s=Object.keys(r).filter(o=>!r[o].acknowledged);if(!s.length)g.info(`All peers have acknowledged message ${n}.`),delete N[n];else for(const o of s){const{lastMessageSentAt:i,originalMessageName:c,originalData:l,numberOfRetries:d,maxNumberOfRetries:p,messageRetryTime:f}=r[o];if(v()-i>f){if(d>=p){if(g.info(`Giving up on message ${n} for ${o}.`),r[o].shouldCancelMessageIfTimesOut){if(c.startsWith(q)){const u=he.exec(c);if(!u){delete N[n];return}const m=u[2],y=u[3],M=e.getInstancesOf(m);if(!M){delete N[n];return}let w=M.find(I=>I.networkId===y);if(!w){delete N[n];return}const h=w.getBehavior("MultiplayerObject");if(!h){D.error(`Object ${m} does not have the MultiplayerObjectBehavior, cannot revert ownership.`),delete N[n];return}const b=l.previousOwner;if(b===void 0){delete N[n];return}h.playerNumber=b||0}if(c.startsWith(X)){const u=we.exec(c);if(!u){delete N[n];return}const m=u[2],y=l.previousOwner,{type:M,name:w,containerId:h}=a.multiplayerVariablesManager.getVariableTypeAndNameFromNetworkId(m);if(M==="scene"&&h!==e.networkId){g.info(`Variable ${w} is in scene ${h}, but we are on ${e.networkId}. Skipping ownership revert.`),delete N[n];return}const b=h==="game"?e.getGame().getVariables():e.getVariables();if(!b.has(w)){D.error(`Variable with ID ${m} not found while reverting ownership. This should not happen.`),delete N[n];return}const I=b.get(w);if(y===void 0){delete N[n];return}I.setPlayerOwnership(y||0)}}delete N[n];continue}P([o],c,l),r[o].lastMessageSentAt=v(),r[o].numberOfRetries=d+1}}})},se="#destroyInstance",et=/#destroyInstance#owner_(\d+)#object_(.+)#instance_(.+)#scene_(.+)/,tt=({objectOwner:e,objectName:t,instanceNetworkId:n,sceneNetworkId:r})=>({messageName:`${se}#owner_${e}#object_${t}#instance_${n}#scene_${r}`,messageData:{}}),ne="#instanceDestroyed",st=/#instanceDestroyed#owner_(\d+)#object_(.+)#instance_(.+)/,Oe=e=>e.replace(se,ne),nt=e=>{if(!a.multiplayer.isReadyToSendOrReceiveGameUpdateMessages())return;const t=a.multiplayerPeerJsHelper.getAllMessagesMap();Array.from(t.keys()).filter(s=>s.startsWith(se)).forEach(s=>{const o=t.get(s);if(!o)return;const i=o.getMessages();!i.length||i.forEach(c=>{const l=c.getData(),d=c.getSender();g.info(`Received message ${s} with data ${JSON.stringify(l)}.`);const p=et.exec(s);if(!p||parseInt(p[1],10)===a.multiplayer.playerNumber)return;const u=p[2],m=p[3],y=p[4];if(y!==e.networkId){g.info(`Object ${u} is in scene ${y}, but we are on ${e.networkId}. Skipping.`);return}const M=Z({runtimeScene:e,objectName:u,instanceNetworkId:m}),w=Oe(s);if(!M){g.info("Instance was not found in the scene, sending acknowledgment anyway."),P([d],w,{});return}if(g.info(`Destroying object ${u} with instance network ID ${m}.`),M.deleteFromScene(e),g.info(`Sending acknowledgment of destruction of object ${u} with instance network ID ${m} to ${d}.`),P([d],w,{}),a.multiplayer.isPlayerHost()){const b=a.multiplayerPeerJsHelper.getAllPeers().filter(I=>I!==d);if(!b.length)return;L({originalMessageName:s,originalData:l,expectedMessageName:w,otherPeerIds:b,shouldCancelMessageIfTimesOut:!1}),P(b,s,l)}})})},ae="#customMessage",at=/#customMessage#(.+)/,z=e=>`${ae}#${e}`,rt=({userMessageName:e,userMessageData:t,senderPlayerNumber:n})=>{const r=a.makeUuid();return{messageName:z(e),messageData:{data:t,uniqueId:r,senderPlayerNumber:n}}},re="#ackCustomMessage",ot=/#ackCustomMessage#(.+)/,Pe=e=>e.replace(ae,re),Ne=(e,t)=>{const n=a.multiplayerPeerJsHelper.getAllPeers(),r=a.multiplayer.getCurrentPlayerNumber(),{messageName:s,messageData:o}=rt({userMessageName:e,userMessageData:t,senderPlayerNumber:r}),i=Pe(s);L({originalMessageName:s,originalData:o,expectedMessageName:i,otherPeerIds:n,shouldCancelMessageIfTimesOut:!1}),g.info(`Sending custom message ${e} with data ${JSON.stringify(t)}.`),P(n,s,o),a.multiplayer.isPlayerHost()&&a.multiplayerPeerJsHelper.getOrCreateMessagesList(s).pushMessage(o,a.multiplayerPeerJsHelper.getCurrentId())},it=(e,t)=>{const n=t.toJSObject();g.info(`Sending custom message ${e} with data ${JSON.stringify(n)}.`),Ne(e,n)},ct=e=>{const t=z(e),r=a.multiplayerPeerJsHelper.getAllMessagesMap().get(t);if(!r)return;const s=r.getMessages();if(!s.length)return;g.info(`custom message ${e} has been received.`);let o=!1;return s.forEach(i=>{const l=i.getData().uniqueId,d=`${t}#${l}`;U.has(d)||(U.add(d),o=!0)}),o},ke=e=>{const t=z(e),r=a.multiplayerPeerJsHelper.getAllMessagesMap().get(t);if(!r)return;const s=r.getMessages();return s.length?s[s.length-1].getData().data:void 0},lt=(e,t)=>{const n=ke(e);!n||(g.info(`Received custom message ${e} with data ${JSON.stringify(n)}.`),t.fromJSObject(n))},gt=e=>{const t=z(e),r=a.multiplayerPeerJsHelper.getAllMessagesMap().get(t);if(!r)return 0;const s=r.getMessages();return s.length?s[s.length-1].getData().senderPlayerNumber:0},ut=()=>{if(!a.multiplayer.isReadyToSendOrReceiveGameUpdateMessages())return;const e=a.multiplayerPeerJsHelper.getAllMessagesMap();Array.from(e.keys()).filter(r=>r.startsWith(ae)).forEach(r=>{const s=e.get(r);if(!s){D.error(`No messages list found for ${r}.`);return}const o=s.getMessages();!o.length||o.forEach(i=>{const c=i.getData(),l=i.getSender(),d=c.uniqueId;if(g.info(`Received custom message ${r} with data ${JSON.stringify(c)}.`),!at.exec(r)){D.error(`Invalid custom message ${r}.`);return}const f=`${r}#${d}`;if(U.has(f)){g.info(`Message ${r} has already been processed, skipping.`);return}const u=Pe(r);if(g.info(`Sending acknowledgment of custom message ${r} to ${l}.`),P([l],u,{}),a.multiplayer.isPlayerHost()){const m=a.multiplayerPeerJsHelper.getAllPeers();if(!m.length)return;L({originalMessageName:r,originalData:c,expectedMessageName:u,otherPeerIds:m,shouldCancelMessageIfTimesOut:!1}),P(m,r,c)}})})},Se="#updateScene",De=({sceneNetworkSyncData:e})=>({messageName:`${Se}`,messageData:e}),dt=e=>e.var?Q?JSON.stringify(e.var)!==JSON.stringify(Q.var):!0:!1,mt=()=>v()-de<1e3/He,pt=e=>{if(!a.multiplayer.isReadyToSendOrReceiveGameUpdateMessages())return;const t=e.getNetworkSyncData({playerNumber:a.multiplayer.getCurrentPlayerNumber()});if(!t)return;const n=dt(t),r=!mt()||n||W>0;if(n&&(W=3),!r)return;const s=a.multiplayerPeerJsHelper.getAllPeers(),{messageName:o,messageData:i}=De({sceneNetworkSyncData:t});P(s,o,i),de=v(),Q=t,W=Math.max(W-1,0)},ft=e=>{const t=a.multiplayerPeerJsHelper.getAllMessagesMap();Array.from(t.keys()).filter(s=>s.startsWith(Se)).forEach(s=>{const o=t.get(s);if(!o)return;const i=o.getMessages();!i.length||i.forEach(c=>{const l=c.getData(),d=c.getSender(),p=l.id;if(a.multiplayer.isReadyToSendOrReceiveGameUpdateMessages()){if(p!==e.networkId){g.info(`Received update of scene ${p}, but we are on ${e.networkId}. Skipping.`);return}e.updateFromNetworkSyncData(l)}else{g.info(`Saving scene ${p} update message for later use.`),V.store(l);return}if(a.multiplayer.isPlayerHost()){const u=a.multiplayerPeerJsHelper.getAllPeers().filter(m=>m!==d);P(u,s,l)}})})},ve="#updateGame",$e=({gameNetworkSyncData:e})=>({messageName:`${ve}`,messageData:e}),yt=e=>{const t=e.var,n=e.ss;if(!t&&!n)return!1;if(!J||!J.var||!J.ss||t&&JSON.stringify(t)!==JSON.stringify(J.var))return!0;if(n){if(n.length!==J.ss.length)return!0;for(let r=0;r<n.length;++r){const s=n[r],o=J.ss[r];if(s.name!==o.name||s.networkId!==o.networkId)return!0}}return!1},ht=()=>v()-me<1e3/xe,bt=e=>{if(!a.multiplayer.isReadyToSendOrReceiveGameUpdateMessages())return;const t=e.getGame().getNetworkSyncData({playerNumber:a.multiplayer.getCurrentPlayerNumber()});if(!t)return;const n=yt(t),r=!ht()||n||F>0;if(n&&(F=3),!r)return;const s=a.multiplayerPeerJsHelper.getAllPeers(),{messageName:o,messageData:i}=$e({gameNetworkSyncData:t});P(s,o,i),me=v(),J=t,F=Math.max(F-1,0)},Mt=e=>{const t=a.multiplayerPeerJsHelper.getAllMessagesMap();Array.from(t.keys()).filter(s=>s.startsWith(ve)).forEach(s=>{const o=t.get(s);if(!o)return;const i=o.getMessages();!i.length||i.forEach(c=>{const l=c.getData(),d=c.getSender();if(a.multiplayer.isReadyToSendOrReceiveGameUpdateMessages())e.getGame().updateFromNetworkSyncData(l);else{g.info("Saving game update message for later use."),B.store(l);return}if(a.multiplayer.isPlayerHost()){const f=a.multiplayerPeerJsHelper.getAllPeers().filter(u=>u!==d);P(f,s,l)}})})},wt=e=>{B.getUpdates().forEach(t=>{g.info("Reapplying saved update of game."),e.getGame().updateFromNetworkSyncData(t)}),B.clear(),V.getUpdates().forEach(t=>{const n=t.id;if(n!==e.networkId){g.info(`Trying to apply saved update of scene ${n}, but we are on ${e.networkId}. Skipping.`);return}g.info(`Reapplying saved update of scene ${n}.`),e.updateFromNetworkSyncData(t),V.remove(t)})},oe="#heartbeat",It=/#heartbeat#(.+)/,ie=()=>{O[1]={ping:0,playerId:a.playerAuthentication.getUserId(),username:a.playerAuthentication.getUsername()};for(const e in O)O[e]={...O[e],ping:ce(parseInt(e,10))};return{messageName:`${oe}#${a.multiplayer.getCurrentPlayerNumber()}`,messageData:{now:v(),playersInfo:O}}},Ot=({heartbeatSentAt:e})=>({messageName:`${oe}#${a.multiplayer.getCurrentPlayerNumber()}`,messageData:{sentAt:e,playerId:a.playerAuthentication.getUserId(),username:a.playerAuthentication.getUsername()}}),Pt=()=>!!E&&v()-E<1e3/Le,Nt=()=>{if(!a.multiplayer.isPlayerHost()||!!Pt())return;const t=a.multiplayerPeerJsHelper.getAllPeers(),{messageName:n,messageData:r}=ie();P(t,n,r),E=v()},kt=()=>{const e=a.multiplayerPeerJsHelper.getAllMessagesMap();Array.from(e.keys()).filter(r=>r.startsWith(oe)).forEach(r=>{const s=e.get(r);if(!s)return;const o=s.getMessages();!o.length||o.forEach(i=>{const c=i.getData(),l=i.getSender(),d=It.exec(r);if(!d)return;const p=parseInt(d[1],10);if(pe[l]=p,!a.multiplayer.isPlayerHost()){const h=a.multiplayer.getCurrentPlayerNumber(),b=Object.keys(O).map(R=>parseInt(R,10)),I=Object.keys(c.playersInfo).map(R=>parseInt(R,10)),H=O[h]&&O[h].ping;if(b.length){const R=I.filter(x=>!b.includes(x)&&x!==h);$.push(...R);const G=b.filter(x=>!I.includes(x));C.push(...G);for(const x of G)Y[x]=le(x)}Ce({source:c.playersInfo,target:O});const{messageName:T,messageData:j}=Ot({heartbeatSentAt:c.now});P([l],T,j),O[h]!==void 0&&O[h].ping!==void 0&&(a.multiplayer.markConnectionAsConnected(),H===void 0&&$.push(h));return}O[p]||$.push(p);const f=v(),u=c.sentAt,m=Math.round(f-u),y=K[p]||[];y.push(m),y.length>5&&y.shift(),K[p]=y;let M=0;for(const h of y)M+=h;const w=Math.round(M/y.length/2);if(O[p]={ping:w,playerId:c.playerId,username:c.username},$.length){const h=a.multiplayerPeerJsHelper.getAllPeers(),{messageName:b,messageData:I}=ie();P(h,b,I),E=v()}})})},ce=e=>{const t=O[e];return t&&t.ping||0},St=()=>{const e=a.multiplayer.getCurrentPlayerNumber();return ce(e)},Dt=e=>{if(D.info(`Marking player ${e} as disconnected.`),C.push(e),Y[e]=le(e),e===1){D.info("Host has disconnected, ending the game."),ge(),a.multiplayer.handleLobbyGameEnded();return}if(Bt(e),a.multiplayer.isPlayerHost()){const t=a.multiplayerPeerJsHelper.getAllPeers(),{messageName:n,messageData:r}=ie();P(t,n,r),E=v()}},le=e=>(O[e]||{}).username||Y[e]||`Player ${e}`,vt=e=>(O[e]||{}).playerId||"",$t=e=>{if(!a.multiplayer.isLobbyGameRunning())return;const t=[],n=a.multiplayerPeerJsHelper.getJustDisconnectedPeers();if(n.length)for(const r of n){const s=pe[r];if(!s)return;D.info(`Player ${s} has disconnected.`),t.push(s)}for(const r of t){if(a.multiplayer.isPlayerHost()){const s=e.getAdhocListOfAllInstances();for(const o of s){const i=o.getBehavior("MultiplayerObject");if(i&&i.getPlayerObjectOwnership()===r){const c=i.getActionOnPlayerDisconnect();c==="DestroyObject"?o.deleteFromScene(e):c==="GiveOwnershipToHost"&&i.removeObjectOwnership()}}}Dt(r)}},Rt=()=>C.length>0,At=e=>C.includes(e),Ct=()=>C,jt=()=>C[0]||0,Tt=()=>{const e=C[0];e!==void 0&&(C=C.slice(1),delete Y[e])},_t=()=>$.length>0,Jt=e=>$.includes(e),Ht=()=>$,xt=()=>$[0]||0,Lt=()=>{$[0]!==void 0&&($=$.slice(1))},Gt=()=>Object.keys(O).map(e=>({playerNumber:parseInt(e,10),playerId:O[e].playerId})),Et=()=>Object.keys(O).length,Ut=e=>O[e]!==void 0,Re="#endGame",Wt=()=>({messageName:Re,messageData:{}}),Vt=()=>{if(!a.multiplayer.isPlayerHost())return;g.info("Sending endgame message.");const e=a.multiplayerPeerJsHelper.getAllPeers(),{messageName:t,messageData:n}=Wt();P(e,t,n)},Ft=()=>{if(a.multiplayer.isPlayerHost())return;const t=a.multiplayerPeerJsHelper.getAllMessagesMap().get(Re);!t||!t.getMessages().length||(D.info("Received endgame message."),ge(),a.multiplayer.handleLobbyGameEnded())},ge=()=>{K={},O={},B.clear(),V.clear(),U.clear(),C=[],$=[],N={},_={}},Bt=e=>{delete K[e],delete O[e]};return{sendDataTo:P,addExpectedMessageAcknowledgement:L,handleAcknowledgeMessagesReceived:Qe,resendClearOrCancelAcknowledgedMessages:Ze,createChangeInstanceOwnerMessage:Ee,createInstanceOwnerChangedMessageNameFromChangeInstanceOwnerMessage:be,handleChangeInstanceOwnerMessagesReceived:We,createUpdateInstanceMessage:Fe,handleUpdateInstanceMessagesReceived:Be,createDestroyInstanceMessage:tt,createInstanceDestroyedMessageNameFromDestroyInstanceMessage:Oe,handleDestroyInstanceMessagesReceived:nt,createChangeVariableOwnerMessage:Ke,createVariableOwnerChangedMessageNameFromChangeVariableOwnerMessage:Ie,handleChangeVariableOwnerMessagesReceived:qe,sendCustomMessage:Ne,getCustomMessageData:ke,sendVariableCustomMessage:it,getVariableCustomMessageData:lt,hasCustomMessageBeenReceived:ct,handleCustomMessagesReceived:ut,getCustomMessageSender:gt,createUpdateSceneMessage:De,handleUpdateSceneMessagesToSend:pt,handleUpdateSceneMessagesReceived:ft,createUpdateGameMessage:$e,handleUpdateGameMessagesToSend:bt,handleUpdateGameMessagesReceived:Mt,handleSavedUpdateMessages:wt,handleHeartbeatsToSend:Nt,handleHeartbeatsReceived:kt,getPlayerPing:ce,getCurrentPlayerPing:St,getPlayerUsername:le,getPlayerId:vt,handleJustDisconnectedPeers:$t,getConnectedPlayers:Gt,getNumberOfConnectedPlayers:Et,isPlayerConnected:Ut,hasAnyPlayerJustLeft:Rt,hasPlayerJustLeft:At,getPlayersWhoJustLeft:Ct,getLatestPlayerWhoJustLeft:jt,removePlayerWhoJustLeft:Tt,hasAnyPlayerJustJoined:_t,hasPlayerJustJoined:Jt,getPlayersWhoJustJoined:Ht,getLatestPlayerWhoJustJoined:xt,removePlayerWhoJustJoined:Lt,sendEndGameMessage:Vt,handleEndGameMessages:Ft,clearAllMessagesTempData:ge}},a.multiplayerMessageManager=a.makeMultiplayerMessageManager()})(gdjs||(gdjs={}));
//# sourceMappingURL=messageManager.js.map
