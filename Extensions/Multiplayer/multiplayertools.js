var gdjs;(function(t){const a=new t.Logger("Multiplayer");let _;(function(n){n.disableMultiplayerForTesting=!1,n._isReadyToSendOrReceiveGameUpdateMessages=!1;let I=null,T=!1,R=!1,k=!1;n._isLobbyGameRunning=!1;let E=!1,m=null,f=null,C=null,i=null,A=null,G=null;const H=1e4,$=3e4,B=5;let v=!1;n.playerNumber=null,t.registerRuntimeScenePreEventsCallback(e=>{v=e.getGame().isUsingGDevelopDevelopmentEnvironment(),!n.disableMultiplayerForTesting&&(t.multiplayerMessageManager.handleHeartbeatsToSend(),t.multiplayerMessageManager.handleJustDisconnectedPeers(e),t.multiplayerMessageManager.handleChangeInstanceOwnerMessagesReceived(e),t.multiplayerMessageManager.handleUpdateInstanceMessagesReceived(e),t.multiplayerMessageManager.handleCustomMessagesReceived(),t.multiplayerMessageManager.handleAcknowledgeMessagesReceived(),t.multiplayerMessageManager.resendClearOrCancelAcknowledgedMessages(e),t.multiplayerMessageManager.handleChangeVariableOwnerMessagesReceived(e),n._isLobbyGameRunning&&t.multiplayerMessageManager.handleSavedUpdateMessages(e),t.multiplayerMessageManager.handleUpdateGameMessagesReceived(e),t.multiplayerMessageManager.handleUpdateSceneMessagesReceived(e))}),t.registerRuntimeScenePostEventsCallback(e=>{n.disableMultiplayerForTesting||(z(e),K(e),t.multiplayerMessageManager.handleHeartbeatsReceived(),t.multiplayerMessageManager.handleDestroyInstanceMessagesReceived(e),t.multiplayerVariablesManager.handleChangeVariableOwnerMessagesToSend(),t.multiplayerMessageManager.handleUpdateGameMessagesToSend(e),t.multiplayerMessageManager.handleUpdateSceneMessagesToSend(e))}),t.registerRuntimeScenePostEventsCallback(()=>{n.disableMultiplayerForTesting||(k=!1,E=!1)});const V=({runtimeGame:e,gameId:o})=>{const s="https://gd.games",r=new URL(`${s}/games/${o}/lobbies${m?`/${m}`:""}`);r.searchParams.set("gameVersion",e.getGameData().properties.version),e.getAdditionalOptions().nativeMobileApp&&r.searchParams.set("nativeMobileApp","true"),r.searchParams.set("isPreview",e.isPreview()?"true":"false"),v&&r.searchParams.set("dev","true"),f&&r.searchParams.set("connectionId",f),n.playerNumber&&r.searchParams.set("positionInLobby",n.playerNumber.toString());const d=t.playerAuthentication.getUserId();d&&r.searchParams.set("playerId",d);const c=t.playerAuthentication.getUserToken();return c&&r.searchParams.set("playerToken",c),r.searchParams.set("multiplayerVersion","2"),r.toString()};n.hasLobbyGameJustStarted=()=>k,n.isLobbyGameRunning=()=>n._isLobbyGameRunning,n.isReadyToSendOrReceiveGameUpdateMessages=()=>n._isReadyToSendOrReceiveGameUpdateMessages,n.hasLobbyGameJustEnded=()=>E,n.getPlayersInLobbyCount=()=>t.multiplayerMessageManager.getNumberOfConnectedPlayers(),n.isPlayerConnected=e=>t.multiplayerMessageManager.isPlayerConnected(e),n.getCurrentPlayerNumber=()=>n.playerNumber||0,n.isPlayerHost=()=>n.playerNumber===1,n.getPlayerUsername=e=>t.multiplayerMessageManager.getPlayerUsername(e),n.getCurrentPlayerUsername=()=>{const e=n.getCurrentPlayerNumber();return n.getPlayerUsername(e)};const z=e=>{const o=t.multiplayerMessageManager.getLatestPlayerWhoJustLeft();if(o){const s=n.getPlayerUsername(o);t.multiplayerComponents.displayPlayerLeftNotification(e,s),t.multiplayerMessageManager.removePlayerWhoJustLeft(),W()}},K=e=>{const o=t.multiplayerMessageManager.getLatestPlayerWhoJustJoined();if(o){const s=n.getPlayerUsername(o);t.multiplayerComponents.displayPlayerJoinedNotification(e,s)}t.multiplayerMessageManager.removePlayerWhoJustJoined()},j=(e,o,s=0)=>{const d=`${v?"https://api-dev.gdevelop.io":"https://api.gdevelop.io"}/game/public-game/${o}`;return fetch(d,{method:"HEAD"}).then(c=>c.status!==200?(a.warn(`Error while fetching the game: ${c.status} ${c.statusText}`),c.status===404||s>2?!1:j(e,o,s+1)):!0,c=>(a.error("Error while fetching game:",c),!1))},Y=function(e,o){if(f){a.info("Already connected to a lobby.");return}i&&(a.warn("Already connected to a lobby. Closing the previous one."),i.close(),f=null,n.playerNumber=null,m=null,i=null);const s=t.projectData.properties.projectUuid,r=t.playerAuthentication.getUserId(),d=t.playerAuthentication.getUserToken();if(!s){a.error("Cannot open lobbies if the project has no ID.");return}if(!r||!d){a.warn("Cannot open lobbies if the player is not connected.");return}const c=v?"wss://api-ws-dev.gdevelop.io/play":"wss://api-ws.gdevelop.io/play",g=new URL(c);g.searchParams.set("gameId",s),g.searchParams.set("lobbyId",o),g.searchParams.set("playerId",r),g.searchParams.set("connectionType","lobby"),g.searchParams.set("playerGameToken",d),i=new WebSocket(g.toString()),i.onopen=()=>{if(a.info("Connected to the lobby."),A=setInterval(()=>{i&&i.send(JSON.stringify({action:"heartbeat",connectionType:"lobby"}))},H),i){i.send(JSON.stringify({action:"getConnectionId"}));const l=e.getGame().getPlatformInfo();i.send(JSON.stringify({action:"sessionInformation",connectionType:"lobby",isCordova:l.isCordova,devicePlatform:l.devicePlatform,navigatorPlatform:l.navigatorPlatform,hasTouch:l.hasTouch,supportedCompressionMethods:l.supportedCompressionMethods}))}},i.onmessage=l=>{if(l.data){const p=JSON.parse(l.data);switch(p.type){case"connectionId":{const b=p.data,u=b.connectionId,y=b.positionInLobby,ge=b.validIceServers||[],pe=b.brokerServerConfig;if(!u||!y){a.error("No connectionId or position received"),t.multiplayerComponents.displayErrorNotification(e),i&&i.close();return}q({runtimeScene:e,connectionId:u,positionInLobby:y,lobbyId:o,playerId:r,playerToken:d,validIceServers:ge,brokerServerConfig:pe});break}case"lobbyUpdated":{const u=p.data.positionInLobby;Q({runtimeScene:e,positionInLobby:u});break}case"gameCountdownStarted":{const b=p.data,u=b.compressionMethod||"none",y=b.secondsToStart||B;X({runtimeScene:e,compressionMethod:u,secondsToStart:y});break}case"gameStarted":{const u=p.data.heartbeatInterval||$;Z({runtimeScene:e,heartbeatInterval:u});break}case"peerId":{const b=p.data;if(!b){a.error("No message received");return}const u=b.peerId,y=b.compressionMethod;if(!u||!y){a.error("Malformed message received");return}ee({peerId:u,compressionMethod:y});break}}}},i.onclose=()=>{if(a.info("Disconnected from the lobby. Either manually or game started."),f=null,i=null,A&&clearInterval(A),n._isLobbyGameRunning)return;const l=t.multiplayerComponents.getLobbiesIframe(e);!l||!l.contentWindow||l.contentWindow.postMessage({id:"lobbyLeft"},"*")}},q=function({runtimeScene:e,connectionId:o,positionInLobby:s,lobbyId:r,playerId:d,playerToken:c,validIceServers:g,brokerServerConfig:l}){if(g.length)for(const b of g)t.multiplayerPeerJsHelper.useCustomICECandidate(b.urls,b.username,b.credential);l?t.multiplayerPeerJsHelper.useCustomBrokerServer(l.hostname,l.port,l.path,l.key,l.secure):t.multiplayerPeerJsHelper.useDefaultBrokerServer(),f=o,n.playerNumber=s,m=r;const p=t.multiplayerComponents.getLobbiesIframe(e);if(!p||!p.contentWindow){a.error("The lobbies iframe is not opened, cannot send the join message.");return}p.contentWindow.postMessage({id:"lobbyJoined",lobbyId:r,playerId:d,playerToken:c,connectionId:f,positionInLobby:s},"https://gd.games")},O=function(){i&&i.close(),f=null,n.playerNumber=null,m=null,i=null},Q=function({runtimeScene:e,positionInLobby:o}){n.playerNumber=o;const s=t.multiplayerComponents.getLobbiesIframe(e);!s||!s.contentWindow||s.contentWindow.postMessage({id:"lobbyUpdated",positionInLobby:o},"*")},X=function({runtimeScene:e,compressionMethod:o,secondsToStart:s}){t.multiplayerPeerJsHelper.setCompressionMethod(o),n.getCurrentPlayerNumber()===1&&se();const r=t.multiplayerComponents.getLobbiesIframe(e);if(!r||!r.contentWindow){a.info("The lobbies iframe is not opened, not sending message.");return}r.contentWindow.postMessage({id:"gameCountdownStarted",secondsToStart:s},"*"),t.multiplayerComponents.hideLobbiesCloseButtonTemporarily(e)},W=async function(){const e=t.projectData.properties.projectUuid,o=t.playerAuthentication.getUserId(),s=t.playerAuthentication.getUserToken();if(!e||!o||!s||!m){a.error("Cannot keep the lobby playing without the game ID or player ID.");return}const r=v?"https://api-dev.gdevelop.io":"https://api.gdevelop.io",d={"Content-Type":"application/json"};let c=`${r}/play/game/${e}/public-lobby/${m}/action/heartbeat`;d.Authorization=`player-game-token ${s}`,c+=`?playerId=${o}`;const g=t.multiplayerMessageManager.getConnectedPlayers();try{await fetch(c,{method:"POST",headers:d,body:JSON.stringify({players:g})})}catch(l){a.error("Error while sending heartbeat, retrying:",l);try{await fetch(c,{method:"POST",headers:d,body:JSON.stringify({players:g})})}catch(p){a.error("Error while sending heartbeat a second time. Giving up:",p)}}},Z=function({runtimeScene:e,heartbeatInterval:o}){const s=t.multiplayerPeerJsHelper.getAllPeers();if(!n.isPlayerHost()&&s.length===0){t.multiplayerComponents.displayConnectionErrorNotification(e),O(),n.removeLobbiesContainer(e),N(e);return}n.isPlayerHost()&&(G=setInterval(async()=>{await W()},o)),a.info("Lobby game has started."),t.multiplayerMessageManager.handleSavedUpdateMessages(e),n._isReadyToSendOrReceiveGameUpdateMessages=!0,k=!0,n._isLobbyGameRunning=!0,n.removeLobbiesContainer(e),i&&i.close(),N(e)};n.handleLobbyGameEnded=function(){a.info("Lobby game has ended."),E=!0,n._isLobbyGameRunning=!1,m=null,n.playerNumber=null,n._isReadyToSendOrReceiveGameUpdateMessages=!1,G&&clearInterval(G),t.multiplayerPeerJsHelper.disconnectFromAllPeers(),t.multiplayerMessageManager.clearAllMessagesTempData()};const ee=function({peerId:e,compressionMethod:o}){t.multiplayerPeerJsHelper.setCompressionMethod(o);const s=t.multiplayerPeerJsHelper.getCurrentId();if(!s){a.error("No peerId found, the player does not seem connected to the broker server.");return}if(s===e){a.info("Received our own peerId, ignoring.");return}t.multiplayerPeerJsHelper.connect(e)},te=function(){if(!i){a.error("No connection to send the start countdown message. Are you connected to a lobby?");return}i.send(JSON.stringify({action:"startGameCountdown",connectionType:"lobby"}))},ne=function(){if(!i){a.error("No connection to send the start countdown message. Are you connected to a lobby?");return}i.send(JSON.stringify({action:"startGame",connectionType:"lobby"})),n._isReadyToSendOrReceiveGameUpdateMessages=!0},oe=function(){if(!i){a.error("No connection to send the start countdown message. Are you connected to a lobby?");return}i.send(JSON.stringify({action:"joinGame",connectionType:"lobby"}))};n.markConnectionAsConnected=function(){!i||i.send(JSON.stringify({action:"updateConnection",connectionType:"lobby",status:"connected"}))},n.endLobbyGame=async function(){if(!n.isLobbyGameRunning())return;if(!n.isPlayerHost()){a.error("Only the host can end the game.");return}n._isLobbyGameRunning=!1,a.info("Ending the lobby game."),t.multiplayerMessageManager.sendEndGameMessage();const e=t.projectData.properties.projectUuid,o=t.playerAuthentication.getUserId(),s=t.playerAuthentication.getUserToken();if(!e||!o||!s||!m){a.error("Cannot end the lobby without the game ID or player ID.");return}const r=v?"https://api-dev.gdevelop.io":"https://api.gdevelop.io",d={"Content-Type":"application/json"};let c=`${r}/play/game/${e}/public-lobby/${m}/action/end`;d.Authorization=`player-game-token ${s}`,c+=`?playerId=${o}`;try{await fetch(c,{method:"POST",headers:d,body:JSON.stringify({gameId:e,lobbyId:m})})}catch(g){a.error("Error while ending the game:",g)}n.handleLobbyGameEnded()};const se=function(){if(!i){a.error("No connection to send the message. Are you connected to a lobby?");return}const e=t.multiplayerPeerJsHelper.getCurrentId();if(!e){a.error("No peerId found, the player doesn't seem connected to the broker server.");return}i.send(JSON.stringify({action:"sendPeerId",connectionType:"lobby",peerId:e}))},ae=function(e,o,{checkOrigin:s}){if(!(s&&!["https://gd.games","http://localhost:4000"].includes(o.origin))){if(!o.data.id)throw new Error("Malformed message");switch(o.data.id){case"lobbiesListenerReady":{re(e);break}case"joinLobby":{if(!o.data.lobbyId)throw new Error("Malformed message.");Y(e,o.data.lobbyId);break}case"startGameCountdown":{te();break}case"startGame":{ne();break}case"leaveLobby":{O();break}case"joinGame":{oe();break}}}},D=function(e,o){a.error(o),n.removeLobbiesContainer(e),N(e)},re=e=>{const o=t.multiplayerComponents.getLobbiesIframe(e);if(!o||!o.contentWindow)return;const s=e.getGame().getPlatformInfo();o.contentWindow.postMessage({id:"sessionInformation",isCordova:s.isCordova,devicePlatform:s.devicePlatform,navigatorPlatform:s.navigatorPlatform,hasTouch:s.hasTouch},"*")},ie=(e,o)=>{const s=V({runtimeGame:e.getGame(),gameId:o});C=r=>{ae(e,r,{checkOrigin:!0})},window.addEventListener("message",C,!0),t.multiplayerComponents.displayIframeInsideLobbiesContainer(e,s)};n.openLobbiesWindow=async e=>{if(n.isLobbiesWindowOpen(e)||t.playerAuthentication.isAuthenticationWindowOpen())return;const o=t.projectData.properties.projectUuid;if(!o){D(e,"The game ID is missing, the lobbies window cannot be opened.");return}if(T||R)return;if(!e.getGame().getRenderer().getDomElementContainer()){D(e,"The div element covering the game couldn't be found, the lobbies window cannot be displayed.");return}const r=()=>{n.removeLobbiesContainer(e)},d=t.playerAuthentication.getUserId(),c=t.playerAuthentication.getUserToken();if(!d||!c){R=!0;const{status:p}=await t.playerAuthentication.openAuthenticationWindow(e).promise;R=!1,p==="logged"&&n.openLobbiesWindow(e);return}if(t.multiplayerComponents.displayLobbies(e,r),I===null){T=!0;try{I=await j(e.getGame(),o)}catch(p){I=!1,a.error("Error while checking if the game is registered:",p),D(e,"Error while checking if the game is registered.");return}finally{T=!1}}const g=e.getGame().getRenderer().getElectron(),l=g?()=>g.shell.openExternal("https://wiki.gdevelop.io/gdevelop5/publishing/web"):()=>window.open("https://wiki.gdevelop.io/gdevelop5/publishing/web","_blank");t.multiplayerComponents.addTextsToLoadingContainer(e,I,l),I&&ie(e,o)},n.isLobbiesWindowOpen=function(e){return!!t.multiplayerComponents.getLobbiesRootContainer(e)},n.showLobbiesCloseButton=function(e,o){t.multiplayerComponents.changeLobbiesWindowCloseActionVisibility(e,o)},n.removeLobbiesContainer=function(e){de(),t.multiplayerComponents.removeLobbiesContainer(e)};const de=function(){C&&(window.removeEventListener("message",C,!0),C=null)},N=function(e){const o=e.getGame().getRenderer().getCanvas();o&&o.focus()};n.leaveGameLobby=async()=>{O(),n.handleLobbyGameEnded()}})(_=t.multiplayer||(t.multiplayer={}))})(gdjs||(gdjs={}));
//# sourceMappingURL=multiplayertools.js.map
